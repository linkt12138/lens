/*************************
 * Project: Anomaly Detection using Video Compression tech
 * Author: Yi-Chao Chen @ UT Austin
 *************************/


/*************************
 * Dataset
 *************************/

1. 4sq/<city>
    - FourSquare data set collected by Gene:
      The files include the checkins of the city. 
      We can retrieve <venue> and <user> info from these checkins.

    - Format:
        1. in "Airport", file name: 4SQ_VENUE_DETAILS_Airport.gz
            VENUE_DATA - venues -| stat
                                 | tags
                                 | ts
                                 | tips
                                 | checkins - users - ['last', 'gender', 'userid', 'ts', 'home', 'first']
                                 | mayor
        2. in other <city>, file name: 4SQ_VENUE_TRENDS_<city>.gz
            -| 'current_lat'
             | 'current_lng'
             | 'VENUE_INDEX'
             | 'VENUE_INFO' - venues - ['city', 'addr', 'zip', 'country', 'cate_name', 'hereNow', 'usersCount', 'state', 'contact', 'cate_id', 'ts', 'checkinsCount', 'lat', 'lng', 'id', 'name']
             | 'VENUE_DETAIL' - venues - ['stat', 'tags', 'ts', 'tips', 'checkins', 'mayor']


2. 4sq/city_info/4SQ_<city>_INFO
    - The detailed information of venues in the above data set.
      Except "Airport", other files are generated by "subtask_process_4sq/generate_city_info.py".

    - Format:
        1. in "Airport", there are several possible format:

            a) venues - ['grp_type', 'city', 'addr', 'checkinsCount', 'cate_name', 'ts', 'hereNow', 'state', 'contact', 'cate_id', 'lat', 'grp_name', 'lng', 'usersCount', 'id', 'name']

            b) venues - ['grp_type', 'name', 'addr', 'checkinsCount', 'cate_name', 'ts', 'hereNow', 'state', 'contact', 'cate_id', 'lat', 'grp_name', 'lng', 'usersCount', 'id', 'name']

        2. in other <city>, our output format is:
            a) venues - ['lat', 'lng', 'id', 'name']


3. video
    Get video samples from:
    - http://trace.eas.asu.edu/yuv/
    - http://media.xiph.org/video/derf/

    - stefan_cif.yuv
        CIF, YCbCr 4:2:0 planar 8 bit, 352*288, 90 frames
    - bus_cif.yuv
        CIF, YCbCr 4:2:0 planar 8 bit, 352*288, 150 frames

    The video files are large, so I put them in valleyview local disk: 
    /var/local/yichao/anomaly_compression/data/video/


/*************************
 * Subtasks
 *************************/

1. subtask_process_4sq
    - generate_city_info.py
        - Goal: read 4sq checkins and produce the information of all venues in the dataset.

        - Input:
            1. city: the name of the city. e.g. Airport, Manhattan, Austin, San_Francisco

        - Output:
            1. ../processed_data/subtask_process_4sq/combined_city_info/4SQ_<city>_INFO
                - The information of the venues in the city.
                  Will be link to ../data/4sq/city_info/4SQ_<city>_INFO and used in generating TM.
                - Format:
                  venues - ['lat', 'lng', 'id', 'name']

        - Batch Run:
            1. batch_generate_city_info.sh

    - generate_Human_TM.py
        - Goal: read 4sq checkins and produce human traffic matrix
        
        - Input: 
            1. period: generate a traffic matrix with "period" days of checkins data.
            2. city: the name of the city. e.g. Airport, Manhattan, Austin, San_Francisco
        
        - Output:
            1. ../processed_data/subtask_process_4sq/TM/<city>_sorted.txt
                - The order of airports in TM
                - Format: <airport name> <lat> <lng>
            2. ../processed_data/subtask_process_4sq/TM/TM_<city>_period<period>_<index>.txt
                - The Human Traffic Matrix using <period> days of data
        
        - Variables:
            1. user_hist: userid - ts - ['last', 'gender', 'userid', 'ts', 'home', 'first', 'lat', 'lng', 'venue', 'venue_id']
        
        - Batch Run:
            1. batch_generate_Human_TM.sh


    - plot_TM.mother.plot
        - Goal: given the Human TM generated above, plot the heat map using Gnuplot

        - Output:
            1. ../figures/subtask_process_4sq/TM/TM_period<period>_<index>.eps
        
        - Batch Run:
            1. batch_plot_TM.pl

2. subtask_psnr
    To compare PSNR of videos compressed using MPEG and PCA.

    - PCA_psnr.m
        - Goal: calculate the PSNR given a rank and video

        - Input:
            1. num_PC: num of PCs to use (i.e. rank)
            2. video_name: the name of raw video (assume the video format: YUV CIF 4:2:0)
            3. frames: number of frames to analyze
            4. width: the width of the video
            5. height: the height of the video

        - Output:
            1. PSNR: the PSNR (dB) of the PCA low-rank approximation.
            2. compressed size: the size of the PCA approximation. e.g. the size of principle components and eigenvectors

        - Batch Run:
            1. batch_PCA_psnr.m


/*************************
 * Helpers: 
 *   ./utils/
 *************************/
1. Matlab Lib: YUV2Image
    - YUV2Image/
    - http://www.mathworks.com/matlabcentral/fileexchange/6318-convert-yuv-cif-420-video-file-to-image-files/

2. Gene Lee's codes
    - data.py, googlemaps.py, utils.py
    - used to process FourSquare dataset.

3. PSNR
    - calculate_psnr.m
    - The codes copied from somewhere online to calculate PSNR of a video










